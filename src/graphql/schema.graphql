 type Website {
  id: Int!
  url: String!
  status: String!
  responseTime: Int!
  timestamp: String!
  user: User
}

type User {
  id: ID!
  email: String!
  userName: String
  password: String!
  website: Website
  profilePhoto: String
  isPaid: Boolean
  slackUserId: String
  slackToken: String
  slackChannelId: String
}

input UserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  email: String
  userName: String
  password: String
  profilePhoto: String
  isPaid: Boolean
}

type AuthPayload {
  token: String
  user: User
}
input deleteUserInput {
  id: ID!
}

input WebsiteInput {
  url: String!
  status: String
  responseTime: Int
}


type Mutation {
  createUser(input: UserInput!): User!
  login(email: String!, password: String!): AuthPayload!
  getMetrics(url: String!): Website!
  emailSendIfDown(url: String, userId: String): String!
  updateUser(input: UpdateUserInput!): User!
  deleteUser: User!
  registerSlack(slackUserId: String!, slackToken: String!, slackChannelId: String!): Boolean!
  sendSlackAlert(userId: String!, message: String!): Boolean!
}

type Query {
  me: User
  metricsHistory(url: String!): [Website]
}
